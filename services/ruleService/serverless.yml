service: ${self:custom.func_prefix}
frameworkVersion: ">=3.0.0 <4.0.0"
plugins:
  - serverless-python-requirements
  - serverless-offline
useDotenv: true

provider:
  name: aws
  runtime: python3.10
  region: us-east-1
  tags:
    department: ${env:Department, "ti"}
    environment: ${env:Stage, "local"}
    project_name: ${env:ProjectName, "project"}
    cost_center: ${env:CostCenter, "cost-center"}
  stage: ${env:stage, "stage"}
  apiGateway:
    restApiId: ${env:ApiGatewayId,"restApiId"}
    restApiRootResourceId: ${env:ApiGatewayResourcesId,"restApiRootResourceId"}
  tracing:
    lambda: true
  timeout: 30
  environment:
    RULES_FILE_PATH: "./src/modules/infraestructure/promos.json" # promos
    STAGE: ${env:Stage, "Stage"}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
  layers:
    - ${param:commonLibs, 'commonLibs'}
  deploymentBucket:
   name: ${ssm:s3_bucket_deploy_sls, "s3_bucket_deploy_sls"}
  iam:
    role: ${env:IamRole, "iamRole"}
  #vpc:
  #  securityGroupIds:
  #    'Fn::Split': [',', ${ssm:securityGroupIds, "SECURITY_GROUP_IDS"}]
  #  subnetIds:
  #    'Fn::Split': [',', ${ssm:subnetIds, "SUBNETS_IDS"}]

functions: ${file(./src/index.yml):extension}

package:
  individually: true

custom:
  pythonRequirements:
    dockerizePip: true
    useStaticCache: true
    useDownloadCache: true
  service: proxy-rule
  stage: ${env:Stage, "Stage"}
  func_prefix: ${self:custom.stage}-${self:custom.service}
